// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Register {
//   id Int @default(autoincrement()) @id
//   userId String @unique
//   username String 
//   email String @unique
//   password String
// }

model User {
  id Int @default(autoincrement()) @id
  userId String @unique
  username String
  email String @unique
  password String
  profilePiture String? @default("")
  followers  Followers[]
  followings Followings[]
  isAdmin Boolean? @default(false)
  desc String?
  posts Post[]
}

model Post {
  id Int @default(autoincrement()) @id
  userId String? 
  username String?
  author User? @relation(fields: [authorId],references: [id], onDelete: Cascade)
  authorId Int? 
  desc String
  img String?
  likes Likes[]
  createdAt DateTime @default(now())
  comment Comment[]
}

model Comment {
  id Int @default(autoincrement()) @id
  post Post? @relation(fields: [postId],references: [id], onDelete: Cascade)
  postId Int
  comment String
  userId String
  username String
  createdAt DateTime @default(now())
}

model Followers {
  id Int @default(autoincrement()) @id
  user User? @relation(fields: [followerId],references: [id], onDelete: Cascade)
  followerId Int
  userId String
}

model Followings {
  id Int @default(autoincrement()) @id
  user User? @relation(fields: [followId],references: [id], onDelete: Cascade)
  followId Int
  userId String
}

model Likes {
  id Int @default(autoincrement()) @id
  like Post? @relation(fields: [likeId],references: [id], onDelete: Cascade)
  likeId Int
  likes String? //userId
  authorId Int?
}
